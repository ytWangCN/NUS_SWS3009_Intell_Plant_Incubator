// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: decision.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "decision.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace roborts_decision {

namespace {

const ::google::protobuf::Descriptor* Point_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Point_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscapeConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscapeConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* SearchConstraint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SearchConstraint_reflection_ = NULL;
const ::google::protobuf::Descriptor* WhirlVel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhirlVel_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiRobot_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiRobot_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlueOrRedGroup_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlueOrRedGroup_reflection_ = NULL;
const ::google::protobuf::Descriptor* DecisionConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DecisionConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_decision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_decision_2eproto() {
  protobuf_AddDesc_decision_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "decision.proto");
  GOOGLE_CHECK(file != NULL);
  Point_descriptor_ = file->message_type(0);
  static const int Point_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, yaw_),
  };
  Point_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Point_descriptor_,
      Point::default_instance_,
      Point_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _has_bits_[0]),
      -1,
      -1,
      sizeof(Point),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Point, _internal_metadata_),
      -1);
  EscapeConstraint_descriptor_ = file->message_type(1);
  static const int EscapeConstraint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, robot_x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, left_random_max_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_min_x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, right_random_max_x_),
  };
  EscapeConstraint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EscapeConstraint_descriptor_,
      EscapeConstraint::default_instance_,
      EscapeConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _has_bits_[0]),
      -1,
      -1,
      sizeof(EscapeConstraint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscapeConstraint, _internal_metadata_),
      -1);
  SearchConstraint_descriptor_ = file->message_type(2);
  static const int SearchConstraint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, x_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, y_limit_),
  };
  SearchConstraint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SearchConstraint_descriptor_,
      SearchConstraint::default_instance_,
      SearchConstraint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _has_bits_[0]),
      -1,
      -1,
      sizeof(SearchConstraint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SearchConstraint, _internal_metadata_),
      -1);
  WhirlVel_descriptor_ = file->message_type(3);
  static const int WhirlVel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_x_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_y_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, angle_z_vel_),
  };
  WhirlVel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WhirlVel_descriptor_,
      WhirlVel::default_instance_,
      WhirlVel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _has_bits_[0]),
      -1,
      -1,
      sizeof(WhirlVel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhirlVel, _internal_metadata_),
      -1);
  MultiRobot_descriptor_ = file->message_type(4);
  static const int MultiRobot_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, start_position_),
  };
  MultiRobot_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiRobot_descriptor_,
      MultiRobot::default_instance_,
      MultiRobot_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, _has_bits_[0]),
      -1,
      -1,
      sizeof(MultiRobot),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiRobot, _internal_metadata_),
      -1);
  BlueOrRedGroup_descriptor_ = file->message_type(5);
  static const int BlueOrRedGroup_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueOrRedGroup, master_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueOrRedGroup, wing_bot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueOrRedGroup, reload_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueOrRedGroup, shield_point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueOrRedGroup, patrol_),
  };
  BlueOrRedGroup_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BlueOrRedGroup_descriptor_,
      BlueOrRedGroup::default_instance_,
      BlueOrRedGroup_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueOrRedGroup, _has_bits_[0]),
      -1,
      -1,
      sizeof(BlueOrRedGroup),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlueOrRedGroup, _internal_metadata_),
      -1);
  DecisionConfig_descriptor_ = file->message_type(6);
  static const int DecisionConfig_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, strategy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, use_camera_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, isblue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, usewifi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, master_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, remain_bullet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, escape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, blue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, red_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, whirl_vel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, search_region_4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, can_shoot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, can_dodge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, dodge_in_reload_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, shoot_hz_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, use_refree_),
  };
  DecisionConfig_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DecisionConfig_descriptor_,
      DecisionConfig::default_instance_,
      DecisionConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _has_bits_[0]),
      -1,
      -1,
      sizeof(DecisionConfig),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DecisionConfig, _internal_metadata_),
      -1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_decision_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Point_descriptor_, &Point::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EscapeConstraint_descriptor_, &EscapeConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SearchConstraint_descriptor_, &SearchConstraint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WhirlVel_descriptor_, &WhirlVel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiRobot_descriptor_, &MultiRobot::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BlueOrRedGroup_descriptor_, &BlueOrRedGroup::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DecisionConfig_descriptor_, &DecisionConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_decision_2eproto() {
  delete Point::default_instance_;
  delete Point_reflection_;
  delete EscapeConstraint::default_instance_;
  delete EscapeConstraint_reflection_;
  delete SearchConstraint::default_instance_;
  delete SearchConstraint_reflection_;
  delete WhirlVel::default_instance_;
  delete WhirlVel_reflection_;
  delete MultiRobot::default_instance_;
  delete MultiRobot_reflection_;
  delete BlueOrRedGroup::default_instance_;
  delete BlueOrRedGroup_reflection_;
  delete DecisionConfig::default_instance_;
  delete DecisionConfig_reflection_;
}

void protobuf_AddDesc_decision_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_decision_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016decision.proto\022\020roborts_decision\"R\n\005Po"
    "int\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\022\014\n\004"
    "roll\030\004 \001(\002\022\r\n\005pitch\030\005 \001(\002\022\013\n\003yaw\030\006 \001(\002\"\304"
    "\001\n\020EscapeConstraint\022\024\n\014left_x_limit\030\001 \001("
    "\002\022\025\n\rright_x_limit\030\002 \001(\002\022\025\n\rrobot_x_limi"
    "t\030\003 \001(\002\022\031\n\021left_random_min_x\030\004 \001(\002\022\031\n\021le"
    "ft_random_max_x\030\005 \001(\002\022\032\n\022right_random_mi"
    "n_x\030\006 \001(\002\022\032\n\022right_random_max_x\030\007 \001(\002\"4\n"
    "\020SearchConstraint\022\017\n\007x_limit\030\001 \001(\002\022\017\n\007y_"
    "limit\030\002 \001(\002\"I\n\010WhirlVel\022\023\n\013angle_x_vel\030\001"
    " \001(\002\022\023\n\013angle_y_vel\030\002 \001(\002\022\023\n\013angle_z_vel"
    "\030\003 \001(\002\"=\n\nMultiRobot\022/\n\016start_position\030\007"
    " \001(\0132\027.roborts_decision.Point\"\371\001\n\016BlueOr"
    "RedGroup\0220\n\nmaster_bot\030\001 \001(\0132\034.roborts_d"
    "ecision.MultiRobot\022.\n\010wing_bot\030\002 \001(\0132\034.r"
    "oborts_decision.MultiRobot\022-\n\014reload_poi"
    "nt\030\003 \001(\0132\027.roborts_decision.Point\022-\n\014shi"
    "eld_point\030\004 \001(\0132\027.roborts_decision.Point"
    "\022\'\n\006patrol\030\005 \003(\0132\027.roborts_decision.Poin"
    "t\"\307\005\n\016DecisionConfig\022\020\n\010strategy\030\001 \001(\t\022\022"
    "\n\nuse_camera\030\002 \001(\010\022\025\n\006master\030\003 \001(\010:\005fals"
    "e\022\024\n\006isblue\030\004 \001(\010:\004true\022\017\n\007usewifi\030\005 \001(\010"
    "\022\021\n\tmaster_ip\030\006 \001(\t\022\025\n\rremain_bullet\030\007 \001"
    "(\005\0222\n\006escape\030\010 \001(\0132\".roborts_decision.Es"
    "capeConstraint\022.\n\004blue\030\t \001(\0132 .roborts_d"
    "ecision.BlueOrRedGroup\022-\n\003red\030\n \001(\0132 .ro"
    "borts_decision.BlueOrRedGroup\0228\n\014search_"
    "limit\030\013 \001(\0132\".roborts_decision.SearchCon"
    "straint\022-\n\twhirl_vel\030\014 \001(\0132\032.roborts_dec"
    "ision.WhirlVel\0220\n\017search_region_1\030\r \003(\0132"
    "\027.roborts_decision.Point\0220\n\017search_regio"
    "n_2\030\016 \003(\0132\027.roborts_decision.Point\0220\n\017se"
    "arch_region_3\030\017 \003(\0132\027.roborts_decision.P"
    "oint\0220\n\017search_region_4\030\020 \003(\0132\027.roborts_"
    "decision.Point\022\021\n\tcan_shoot\030\021 \001(\010\022\021\n\tcan"
    "_dodge\030\022 \001(\010\022\027\n\017dodge_in_reload\030\023 \001(\010\022\020\n"
    "\010shoot_hz\030\024 \001(\005\022\022\n\nuse_refree\030\025 \001(\010", 1475);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "decision.proto", &protobuf_RegisterTypes);
  Point::default_instance_ = new Point();
  EscapeConstraint::default_instance_ = new EscapeConstraint();
  SearchConstraint::default_instance_ = new SearchConstraint();
  WhirlVel::default_instance_ = new WhirlVel();
  MultiRobot::default_instance_ = new MultiRobot();
  BlueOrRedGroup::default_instance_ = new BlueOrRedGroup();
  DecisionConfig::default_instance_ = new DecisionConfig();
  Point::default_instance_->InitAsDefaultInstance();
  EscapeConstraint::default_instance_->InitAsDefaultInstance();
  SearchConstraint::default_instance_->InitAsDefaultInstance();
  WhirlVel::default_instance_->InitAsDefaultInstance();
  MultiRobot::default_instance_->InitAsDefaultInstance();
  BlueOrRedGroup::default_instance_->InitAsDefaultInstance();
  DecisionConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_decision_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_decision_2eproto {
  StaticDescriptorInitializer_decision_2eproto() {
    protobuf_AddDesc_decision_2eproto();
  }
} static_descriptor_initializer_decision_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
const int Point::kRollFieldNumber;
const int Point::kPitchFieldNumber;
const int Point::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.Point)
}

void Point::InitAsDefaultInstance() {
}

Point::Point(const Point& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  roll_ = 0;
  pitch_ = 0;
  yaw_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:roborts_decision.Point)
  SharedDtor();
}

void Point::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Point::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Point_descriptor_;
}

const Point& Point::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

Point* Point::default_instance_ = NULL;

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.Point)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(Point, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Point*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 63u) {
    ZR_(x_, yaw_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }

      // optional float y = 2;
      case 2: {
        if (tag == 21) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }

      // optional float z = 3;
      case 3: {
        if (tag == 29) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_roll;
        break;
      }

      // optional float roll = 4;
      case 4: {
        if (tag == 37) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_pitch;
        break;
      }

      // optional float pitch = 5;
      case 5: {
        if (tag == 45) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_yaw;
        break;
      }

      // optional float yaw = 6;
      case 6: {
        if (tag == 53) {
         parse_yaw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &yaw_)));
          set_has_yaw();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // optional float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // optional float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  // optional float roll = 4;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->roll(), output);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->pitch(), output);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->yaw(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.Point)
}

::google::protobuf::uint8* Point::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.Point)
  // optional float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // optional float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // optional float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  // optional float roll = 4;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->roll(), target);
  }

  // optional float pitch = 5;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->pitch(), target);
  }

  // optional float yaw = 6;
  if (has_yaw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->yaw(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.Point)
  return target;
}

int Point::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.Point)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 63u) {
    // optional float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float roll = 4;
    if (has_roll()) {
      total_size += 1 + 4;
    }

    // optional float pitch = 5;
    if (has_pitch()) {
      total_size += 1 + 4;
    }

    // optional float yaw = 6;
    if (has_yaw()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Point* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Point>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.Point)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.Point)
    MergeFrom(*source);
  }
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.Point)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
    if (from.has_yaw()) {
      set_yaw(from.yaw());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Point::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {

  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(roll_, other->roll_);
  std::swap(pitch_, other->pitch_);
  std::swap(yaw_, other->yaw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Point::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Point_descriptor_;
  metadata.reflection = Point_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional float x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Point::x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.x)
  return x_;
}
 void Point::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.x)
}

// optional float y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Point::y() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.y)
  return y_;
}
 void Point::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.y)
}

// optional float z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Point::z() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.z)
  return z_;
}
 void Point::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.z)
}

// optional float roll = 4;
bool Point::has_roll() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Point::set_has_roll() {
  _has_bits_[0] |= 0x00000008u;
}
void Point::clear_has_roll() {
  _has_bits_[0] &= ~0x00000008u;
}
void Point::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
 float Point::roll() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.roll)
  return roll_;
}
 void Point::set_roll(float value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.roll)
}

// optional float pitch = 5;
bool Point::has_pitch() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Point::set_has_pitch() {
  _has_bits_[0] |= 0x00000010u;
}
void Point::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000010u;
}
void Point::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
 float Point::pitch() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.pitch)
  return pitch_;
}
 void Point::set_pitch(float value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.pitch)
}

// optional float yaw = 6;
bool Point::has_yaw() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Point::set_has_yaw() {
  _has_bits_[0] |= 0x00000020u;
}
void Point::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000020u;
}
void Point::clear_yaw() {
  yaw_ = 0;
  clear_has_yaw();
}
 float Point::yaw() const {
  // @@protoc_insertion_point(field_get:roborts_decision.Point.yaw)
  return yaw_;
}
 void Point::set_yaw(float value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.Point.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EscapeConstraint::kLeftXLimitFieldNumber;
const int EscapeConstraint::kRightXLimitFieldNumber;
const int EscapeConstraint::kRobotXLimitFieldNumber;
const int EscapeConstraint::kLeftRandomMinXFieldNumber;
const int EscapeConstraint::kLeftRandomMaxXFieldNumber;
const int EscapeConstraint::kRightRandomMinXFieldNumber;
const int EscapeConstraint::kRightRandomMaxXFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EscapeConstraint::EscapeConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::InitAsDefaultInstance() {
}

EscapeConstraint::EscapeConstraint(const EscapeConstraint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.EscapeConstraint)
}

void EscapeConstraint::SharedCtor() {
  _cached_size_ = 0;
  left_x_limit_ = 0;
  right_x_limit_ = 0;
  robot_x_limit_ = 0;
  left_random_min_x_ = 0;
  left_random_max_x_ = 0;
  right_random_min_x_ = 0;
  right_random_max_x_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscapeConstraint::~EscapeConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.EscapeConstraint)
  SharedDtor();
}

void EscapeConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscapeConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscapeConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscapeConstraint_descriptor_;
}

const EscapeConstraint& EscapeConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

EscapeConstraint* EscapeConstraint::default_instance_ = NULL;

EscapeConstraint* EscapeConstraint::New(::google::protobuf::Arena* arena) const {
  EscapeConstraint* n = new EscapeConstraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EscapeConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.EscapeConstraint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EscapeConstraint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EscapeConstraint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 127u) {
    ZR_(left_x_limit_, right_random_max_x_);
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EscapeConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.EscapeConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float left_x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_x_limit_)));
          set_has_left_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_right_x_limit;
        break;
      }

      // optional float right_x_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_right_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_x_limit_)));
          set_has_right_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_robot_x_limit;
        break;
      }

      // optional float robot_x_limit = 3;
      case 3: {
        if (tag == 29) {
         parse_robot_x_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &robot_x_limit_)));
          set_has_robot_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(37)) goto parse_left_random_min_x;
        break;
      }

      // optional float left_random_min_x = 4;
      case 4: {
        if (tag == 37) {
         parse_left_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_min_x_)));
          set_has_left_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_left_random_max_x;
        break;
      }

      // optional float left_random_max_x = 5;
      case 5: {
        if (tag == 45) {
         parse_left_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &left_random_max_x_)));
          set_has_left_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_right_random_min_x;
        break;
      }

      // optional float right_random_min_x = 6;
      case 6: {
        if (tag == 53) {
         parse_right_random_min_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_min_x_)));
          set_has_right_random_min_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(61)) goto parse_right_random_max_x;
        break;
      }

      // optional float right_random_max_x = 7;
      case 7: {
        if (tag == 61) {
         parse_right_random_max_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &right_random_max_x_)));
          set_has_right_random_max_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.EscapeConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.EscapeConstraint)
  return false;
#undef DO_
}

void EscapeConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->left_x_limit(), output);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->right_x_limit(), output);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->robot_x_limit(), output);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->left_random_min_x(), output);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->left_random_max_x(), output);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->right_random_min_x(), output);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->right_random_max_x(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.EscapeConstraint)
}

::google::protobuf::uint8* EscapeConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.EscapeConstraint)
  // optional float left_x_limit = 1;
  if (has_left_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->left_x_limit(), target);
  }

  // optional float right_x_limit = 2;
  if (has_right_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->right_x_limit(), target);
  }

  // optional float robot_x_limit = 3;
  if (has_robot_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->robot_x_limit(), target);
  }

  // optional float left_random_min_x = 4;
  if (has_left_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->left_random_min_x(), target);
  }

  // optional float left_random_max_x = 5;
  if (has_left_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->left_random_max_x(), target);
  }

  // optional float right_random_min_x = 6;
  if (has_right_random_min_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->right_random_min_x(), target);
  }

  // optional float right_random_max_x = 7;
  if (has_right_random_max_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->right_random_max_x(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.EscapeConstraint)
  return target;
}

int EscapeConstraint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.EscapeConstraint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 127u) {
    // optional float left_x_limit = 1;
    if (has_left_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float right_x_limit = 2;
    if (has_right_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float robot_x_limit = 3;
    if (has_robot_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float left_random_min_x = 4;
    if (has_left_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float left_random_max_x = 5;
    if (has_left_random_max_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_min_x = 6;
    if (has_right_random_min_x()) {
      total_size += 1 + 4;
    }

    // optional float right_random_max_x = 7;
    if (has_right_random_max_x()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscapeConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.EscapeConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EscapeConstraint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EscapeConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.EscapeConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.EscapeConstraint)
    MergeFrom(*source);
  }
}

void EscapeConstraint::MergeFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.EscapeConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_left_x_limit()) {
      set_left_x_limit(from.left_x_limit());
    }
    if (from.has_right_x_limit()) {
      set_right_x_limit(from.right_x_limit());
    }
    if (from.has_robot_x_limit()) {
      set_robot_x_limit(from.robot_x_limit());
    }
    if (from.has_left_random_min_x()) {
      set_left_random_min_x(from.left_random_min_x());
    }
    if (from.has_left_random_max_x()) {
      set_left_random_max_x(from.left_random_max_x());
    }
    if (from.has_right_random_min_x()) {
      set_right_random_min_x(from.right_random_min_x());
    }
    if (from.has_right_random_max_x()) {
      set_right_random_max_x(from.right_random_max_x());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EscapeConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscapeConstraint::CopyFrom(const EscapeConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.EscapeConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscapeConstraint::IsInitialized() const {

  return true;
}

void EscapeConstraint::Swap(EscapeConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EscapeConstraint::InternalSwap(EscapeConstraint* other) {
  std::swap(left_x_limit_, other->left_x_limit_);
  std::swap(right_x_limit_, other->right_x_limit_);
  std::swap(robot_x_limit_, other->robot_x_limit_);
  std::swap(left_random_min_x_, other->left_random_min_x_);
  std::swap(left_random_max_x_, other->left_random_max_x_);
  std::swap(right_random_min_x_, other->right_random_min_x_);
  std::swap(right_random_max_x_, other->right_random_max_x_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EscapeConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscapeConstraint_descriptor_;
  metadata.reflection = EscapeConstraint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EscapeConstraint

// optional float left_x_limit = 1;
bool EscapeConstraint::has_left_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EscapeConstraint::set_has_left_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
void EscapeConstraint::clear_has_left_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
void EscapeConstraint::clear_left_x_limit() {
  left_x_limit_ = 0;
  clear_has_left_x_limit();
}
 float EscapeConstraint::left_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_x_limit)
  return left_x_limit_;
}
 void EscapeConstraint::set_left_x_limit(float value) {
  set_has_left_x_limit();
  left_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_x_limit)
}

// optional float right_x_limit = 2;
bool EscapeConstraint::has_right_x_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EscapeConstraint::set_has_right_x_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void EscapeConstraint::clear_has_right_x_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void EscapeConstraint::clear_right_x_limit() {
  right_x_limit_ = 0;
  clear_has_right_x_limit();
}
 float EscapeConstraint::right_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_x_limit)
  return right_x_limit_;
}
 void EscapeConstraint::set_right_x_limit(float value) {
  set_has_right_x_limit();
  right_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_x_limit)
}

// optional float robot_x_limit = 3;
bool EscapeConstraint::has_robot_x_limit() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EscapeConstraint::set_has_robot_x_limit() {
  _has_bits_[0] |= 0x00000004u;
}
void EscapeConstraint::clear_has_robot_x_limit() {
  _has_bits_[0] &= ~0x00000004u;
}
void EscapeConstraint::clear_robot_x_limit() {
  robot_x_limit_ = 0;
  clear_has_robot_x_limit();
}
 float EscapeConstraint::robot_x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.robot_x_limit)
  return robot_x_limit_;
}
 void EscapeConstraint::set_robot_x_limit(float value) {
  set_has_robot_x_limit();
  robot_x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.robot_x_limit)
}

// optional float left_random_min_x = 4;
bool EscapeConstraint::has_left_random_min_x() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EscapeConstraint::set_has_left_random_min_x() {
  _has_bits_[0] |= 0x00000008u;
}
void EscapeConstraint::clear_has_left_random_min_x() {
  _has_bits_[0] &= ~0x00000008u;
}
void EscapeConstraint::clear_left_random_min_x() {
  left_random_min_x_ = 0;
  clear_has_left_random_min_x();
}
 float EscapeConstraint::left_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_min_x)
  return left_random_min_x_;
}
 void EscapeConstraint::set_left_random_min_x(float value) {
  set_has_left_random_min_x();
  left_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_min_x)
}

// optional float left_random_max_x = 5;
bool EscapeConstraint::has_left_random_max_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EscapeConstraint::set_has_left_random_max_x() {
  _has_bits_[0] |= 0x00000010u;
}
void EscapeConstraint::clear_has_left_random_max_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void EscapeConstraint::clear_left_random_max_x() {
  left_random_max_x_ = 0;
  clear_has_left_random_max_x();
}
 float EscapeConstraint::left_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.left_random_max_x)
  return left_random_max_x_;
}
 void EscapeConstraint::set_left_random_max_x(float value) {
  set_has_left_random_max_x();
  left_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.left_random_max_x)
}

// optional float right_random_min_x = 6;
bool EscapeConstraint::has_right_random_min_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EscapeConstraint::set_has_right_random_min_x() {
  _has_bits_[0] |= 0x00000020u;
}
void EscapeConstraint::clear_has_right_random_min_x() {
  _has_bits_[0] &= ~0x00000020u;
}
void EscapeConstraint::clear_right_random_min_x() {
  right_random_min_x_ = 0;
  clear_has_right_random_min_x();
}
 float EscapeConstraint::right_random_min_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_min_x)
  return right_random_min_x_;
}
 void EscapeConstraint::set_right_random_min_x(float value) {
  set_has_right_random_min_x();
  right_random_min_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_min_x)
}

// optional float right_random_max_x = 7;
bool EscapeConstraint::has_right_random_max_x() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EscapeConstraint::set_has_right_random_max_x() {
  _has_bits_[0] |= 0x00000040u;
}
void EscapeConstraint::clear_has_right_random_max_x() {
  _has_bits_[0] &= ~0x00000040u;
}
void EscapeConstraint::clear_right_random_max_x() {
  right_random_max_x_ = 0;
  clear_has_right_random_max_x();
}
 float EscapeConstraint::right_random_max_x() const {
  // @@protoc_insertion_point(field_get:roborts_decision.EscapeConstraint.right_random_max_x)
  return right_random_max_x_;
}
 void EscapeConstraint::set_right_random_max_x(float value) {
  set_has_right_random_max_x();
  right_random_max_x_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.EscapeConstraint.right_random_max_x)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SearchConstraint::kXLimitFieldNumber;
const int SearchConstraint::kYLimitFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SearchConstraint::SearchConstraint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::InitAsDefaultInstance() {
}

SearchConstraint::SearchConstraint(const SearchConstraint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.SearchConstraint)
}

void SearchConstraint::SharedCtor() {
  _cached_size_ = 0;
  x_limit_ = 0;
  y_limit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SearchConstraint::~SearchConstraint() {
  // @@protoc_insertion_point(destructor:roborts_decision.SearchConstraint)
  SharedDtor();
}

void SearchConstraint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SearchConstraint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SearchConstraint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SearchConstraint_descriptor_;
}

const SearchConstraint& SearchConstraint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

SearchConstraint* SearchConstraint::default_instance_ = NULL;

SearchConstraint* SearchConstraint::New(::google::protobuf::Arena* arena) const {
  SearchConstraint* n = new SearchConstraint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SearchConstraint::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.SearchConstraint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SearchConstraint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SearchConstraint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_limit_, y_limit_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SearchConstraint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.SearchConstraint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float x_limit = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_limit_)));
          set_has_x_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_y_limit;
        break;
      }

      // optional float y_limit = 2;
      case 2: {
        if (tag == 21) {
         parse_y_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_limit_)));
          set_has_y_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.SearchConstraint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.SearchConstraint)
  return false;
#undef DO_
}

void SearchConstraint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_limit(), output);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y_limit(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.SearchConstraint)
}

::google::protobuf::uint8* SearchConstraint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.SearchConstraint)
  // optional float x_limit = 1;
  if (has_x_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_limit(), target);
  }

  // optional float y_limit = 2;
  if (has_y_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y_limit(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.SearchConstraint)
  return target;
}

int SearchConstraint::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.SearchConstraint)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional float x_limit = 1;
    if (has_x_limit()) {
      total_size += 1 + 4;
    }

    // optional float y_limit = 2;
    if (has_y_limit()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SearchConstraint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.SearchConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SearchConstraint* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SearchConstraint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.SearchConstraint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.SearchConstraint)
    MergeFrom(*source);
  }
}

void SearchConstraint::MergeFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.SearchConstraint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x_limit()) {
      set_x_limit(from.x_limit());
    }
    if (from.has_y_limit()) {
      set_y_limit(from.y_limit());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SearchConstraint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SearchConstraint::CopyFrom(const SearchConstraint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.SearchConstraint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SearchConstraint::IsInitialized() const {

  return true;
}

void SearchConstraint::Swap(SearchConstraint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SearchConstraint::InternalSwap(SearchConstraint* other) {
  std::swap(x_limit_, other->x_limit_);
  std::swap(y_limit_, other->y_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SearchConstraint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SearchConstraint_descriptor_;
  metadata.reflection = SearchConstraint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SearchConstraint

// optional float x_limit = 1;
bool SearchConstraint::has_x_limit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SearchConstraint::set_has_x_limit() {
  _has_bits_[0] |= 0x00000001u;
}
void SearchConstraint::clear_has_x_limit() {
  _has_bits_[0] &= ~0x00000001u;
}
void SearchConstraint::clear_x_limit() {
  x_limit_ = 0;
  clear_has_x_limit();
}
 float SearchConstraint::x_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.x_limit)
  return x_limit_;
}
 void SearchConstraint::set_x_limit(float value) {
  set_has_x_limit();
  x_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.x_limit)
}

// optional float y_limit = 2;
bool SearchConstraint::has_y_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SearchConstraint::set_has_y_limit() {
  _has_bits_[0] |= 0x00000002u;
}
void SearchConstraint::clear_has_y_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
void SearchConstraint::clear_y_limit() {
  y_limit_ = 0;
  clear_has_y_limit();
}
 float SearchConstraint::y_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.SearchConstraint.y_limit)
  return y_limit_;
}
 void SearchConstraint::set_y_limit(float value) {
  set_has_y_limit();
  y_limit_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.SearchConstraint.y_limit)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WhirlVel::kAngleXVelFieldNumber;
const int WhirlVel::kAngleYVelFieldNumber;
const int WhirlVel::kAngleZVelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WhirlVel::WhirlVel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.WhirlVel)
}

void WhirlVel::InitAsDefaultInstance() {
}

WhirlVel::WhirlVel(const WhirlVel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.WhirlVel)
}

void WhirlVel::SharedCtor() {
  _cached_size_ = 0;
  angle_x_vel_ = 0;
  angle_y_vel_ = 0;
  angle_z_vel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhirlVel::~WhirlVel() {
  // @@protoc_insertion_point(destructor:roborts_decision.WhirlVel)
  SharedDtor();
}

void WhirlVel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WhirlVel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhirlVel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhirlVel_descriptor_;
}

const WhirlVel& WhirlVel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

WhirlVel* WhirlVel::default_instance_ = NULL;

WhirlVel* WhirlVel::New(::google::protobuf::Arena* arena) const {
  WhirlVel* n = new WhirlVel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WhirlVel::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.WhirlVel)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(WhirlVel, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<WhirlVel*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(angle_x_vel_, angle_z_vel_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool WhirlVel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.WhirlVel)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float angle_x_vel = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_x_vel_)));
          set_has_angle_x_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_angle_y_vel;
        break;
      }

      // optional float angle_y_vel = 2;
      case 2: {
        if (tag == 21) {
         parse_angle_y_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_y_vel_)));
          set_has_angle_y_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_angle_z_vel;
        break;
      }

      // optional float angle_z_vel = 3;
      case 3: {
        if (tag == 29) {
         parse_angle_z_vel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &angle_z_vel_)));
          set_has_angle_z_vel();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.WhirlVel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.WhirlVel)
  return false;
#undef DO_
}

void WhirlVel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->angle_x_vel(), output);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->angle_y_vel(), output);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->angle_z_vel(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.WhirlVel)
}

::google::protobuf::uint8* WhirlVel::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.WhirlVel)
  // optional float angle_x_vel = 1;
  if (has_angle_x_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->angle_x_vel(), target);
  }

  // optional float angle_y_vel = 2;
  if (has_angle_y_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->angle_y_vel(), target);
  }

  // optional float angle_z_vel = 3;
  if (has_angle_z_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->angle_z_vel(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.WhirlVel)
  return target;
}

int WhirlVel::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.WhirlVel)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 7u) {
    // optional float angle_x_vel = 1;
    if (has_angle_x_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_y_vel = 2;
    if (has_angle_y_vel()) {
      total_size += 1 + 4;
    }

    // optional float angle_z_vel = 3;
    if (has_angle_z_vel()) {
      total_size += 1 + 4;
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhirlVel::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.WhirlVel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const WhirlVel* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const WhirlVel>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.WhirlVel)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.WhirlVel)
    MergeFrom(*source);
  }
}

void WhirlVel::MergeFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.WhirlVel)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_angle_x_vel()) {
      set_angle_x_vel(from.angle_x_vel());
    }
    if (from.has_angle_y_vel()) {
      set_angle_y_vel(from.angle_y_vel());
    }
    if (from.has_angle_z_vel()) {
      set_angle_z_vel(from.angle_z_vel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void WhirlVel::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhirlVel::CopyFrom(const WhirlVel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.WhirlVel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhirlVel::IsInitialized() const {

  return true;
}

void WhirlVel::Swap(WhirlVel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WhirlVel::InternalSwap(WhirlVel* other) {
  std::swap(angle_x_vel_, other->angle_x_vel_);
  std::swap(angle_y_vel_, other->angle_y_vel_);
  std::swap(angle_z_vel_, other->angle_z_vel_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata WhirlVel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhirlVel_descriptor_;
  metadata.reflection = WhirlVel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WhirlVel

// optional float angle_x_vel = 1;
bool WhirlVel::has_angle_x_vel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void WhirlVel::set_has_angle_x_vel() {
  _has_bits_[0] |= 0x00000001u;
}
void WhirlVel::clear_has_angle_x_vel() {
  _has_bits_[0] &= ~0x00000001u;
}
void WhirlVel::clear_angle_x_vel() {
  angle_x_vel_ = 0;
  clear_has_angle_x_vel();
}
 float WhirlVel::angle_x_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_x_vel)
  return angle_x_vel_;
}
 void WhirlVel::set_angle_x_vel(float value) {
  set_has_angle_x_vel();
  angle_x_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_x_vel)
}

// optional float angle_y_vel = 2;
bool WhirlVel::has_angle_y_vel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void WhirlVel::set_has_angle_y_vel() {
  _has_bits_[0] |= 0x00000002u;
}
void WhirlVel::clear_has_angle_y_vel() {
  _has_bits_[0] &= ~0x00000002u;
}
void WhirlVel::clear_angle_y_vel() {
  angle_y_vel_ = 0;
  clear_has_angle_y_vel();
}
 float WhirlVel::angle_y_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_y_vel)
  return angle_y_vel_;
}
 void WhirlVel::set_angle_y_vel(float value) {
  set_has_angle_y_vel();
  angle_y_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_y_vel)
}

// optional float angle_z_vel = 3;
bool WhirlVel::has_angle_z_vel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void WhirlVel::set_has_angle_z_vel() {
  _has_bits_[0] |= 0x00000004u;
}
void WhirlVel::clear_has_angle_z_vel() {
  _has_bits_[0] &= ~0x00000004u;
}
void WhirlVel::clear_angle_z_vel() {
  angle_z_vel_ = 0;
  clear_has_angle_z_vel();
}
 float WhirlVel::angle_z_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.WhirlVel.angle_z_vel)
  return angle_z_vel_;
}
 void WhirlVel::set_angle_z_vel(float value) {
  set_has_angle_z_vel();
  angle_z_vel_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.WhirlVel.angle_z_vel)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiRobot::kStartPositionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiRobot::MultiRobot()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.MultiRobot)
}

void MultiRobot::InitAsDefaultInstance() {
  start_position_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

MultiRobot::MultiRobot(const MultiRobot& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.MultiRobot)
}

void MultiRobot::SharedCtor() {
  _cached_size_ = 0;
  start_position_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MultiRobot::~MultiRobot() {
  // @@protoc_insertion_point(destructor:roborts_decision.MultiRobot)
  SharedDtor();
}

void MultiRobot::SharedDtor() {
  if (this != default_instance_) {
    delete start_position_;
  }
}

void MultiRobot::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiRobot::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiRobot_descriptor_;
}

const MultiRobot& MultiRobot::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

MultiRobot* MultiRobot::default_instance_ = NULL;

MultiRobot* MultiRobot::New(::google::protobuf::Arena* arena) const {
  MultiRobot* n = new MultiRobot;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiRobot::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.MultiRobot)
  if (has_start_position()) {
    if (start_position_ != NULL) start_position_->::roborts_decision::Point::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MultiRobot::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.MultiRobot)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_decision.Point start_position = 7;
      case 7: {
        if (tag == 58) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.MultiRobot)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.MultiRobot)
  return false;
#undef DO_
}

void MultiRobot::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.MultiRobot)
  // optional .roborts_decision.Point start_position = 7;
  if (has_start_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *this->start_position_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.MultiRobot)
}

::google::protobuf::uint8* MultiRobot::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.MultiRobot)
  // optional .roborts_decision.Point start_position = 7;
  if (has_start_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *this->start_position_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.MultiRobot)
  return target;
}

int MultiRobot::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.MultiRobot)
  int total_size = 0;

  // optional .roborts_decision.Point start_position = 7;
  if (has_start_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->start_position_);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MultiRobot::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.MultiRobot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MultiRobot* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MultiRobot>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.MultiRobot)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.MultiRobot)
    MergeFrom(*source);
  }
}

void MultiRobot::MergeFrom(const MultiRobot& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.MultiRobot)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start_position()) {
      mutable_start_position()->::roborts_decision::Point::MergeFrom(from.start_position());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MultiRobot::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.MultiRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiRobot::CopyFrom(const MultiRobot& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.MultiRobot)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiRobot::IsInitialized() const {

  return true;
}

void MultiRobot::Swap(MultiRobot* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiRobot::InternalSwap(MultiRobot* other) {
  std::swap(start_position_, other->start_position_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MultiRobot::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiRobot_descriptor_;
  metadata.reflection = MultiRobot_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiRobot

// optional .roborts_decision.Point start_position = 7;
bool MultiRobot::has_start_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MultiRobot::set_has_start_position() {
  _has_bits_[0] |= 0x00000001u;
}
void MultiRobot::clear_has_start_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void MultiRobot::clear_start_position() {
  if (start_position_ != NULL) start_position_->::roborts_decision::Point::Clear();
  clear_has_start_position();
}
const ::roborts_decision::Point& MultiRobot::start_position() const {
  // @@protoc_insertion_point(field_get:roborts_decision.MultiRobot.start_position)
  return start_position_ != NULL ? *start_position_ : *default_instance_->start_position_;
}
::roborts_decision::Point* MultiRobot::mutable_start_position() {
  set_has_start_position();
  if (start_position_ == NULL) {
    start_position_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.MultiRobot.start_position)
  return start_position_;
}
::roborts_decision::Point* MultiRobot::release_start_position() {
  // @@protoc_insertion_point(field_release:roborts_decision.MultiRobot.start_position)
  clear_has_start_position();
  ::roborts_decision::Point* temp = start_position_;
  start_position_ = NULL;
  return temp;
}
void MultiRobot::set_allocated_start_position(::roborts_decision::Point* start_position) {
  delete start_position_;
  start_position_ = start_position;
  if (start_position) {
    set_has_start_position();
  } else {
    clear_has_start_position();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.MultiRobot.start_position)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BlueOrRedGroup::kMasterBotFieldNumber;
const int BlueOrRedGroup::kWingBotFieldNumber;
const int BlueOrRedGroup::kReloadPointFieldNumber;
const int BlueOrRedGroup::kShieldPointFieldNumber;
const int BlueOrRedGroup::kPatrolFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BlueOrRedGroup::BlueOrRedGroup()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.BlueOrRedGroup)
}

void BlueOrRedGroup::InitAsDefaultInstance() {
  master_bot_ = const_cast< ::roborts_decision::MultiRobot*>(&::roborts_decision::MultiRobot::default_instance());
  wing_bot_ = const_cast< ::roborts_decision::MultiRobot*>(&::roborts_decision::MultiRobot::default_instance());
  reload_point_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
  shield_point_ = const_cast< ::roborts_decision::Point*>(&::roborts_decision::Point::default_instance());
}

BlueOrRedGroup::BlueOrRedGroup(const BlueOrRedGroup& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.BlueOrRedGroup)
}

void BlueOrRedGroup::SharedCtor() {
  _cached_size_ = 0;
  master_bot_ = NULL;
  wing_bot_ = NULL;
  reload_point_ = NULL;
  shield_point_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlueOrRedGroup::~BlueOrRedGroup() {
  // @@protoc_insertion_point(destructor:roborts_decision.BlueOrRedGroup)
  SharedDtor();
}

void BlueOrRedGroup::SharedDtor() {
  if (this != default_instance_) {
    delete master_bot_;
    delete wing_bot_;
    delete reload_point_;
    delete shield_point_;
  }
}

void BlueOrRedGroup::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlueOrRedGroup::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlueOrRedGroup_descriptor_;
}

const BlueOrRedGroup& BlueOrRedGroup::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

BlueOrRedGroup* BlueOrRedGroup::default_instance_ = NULL;

BlueOrRedGroup* BlueOrRedGroup::New(::google::protobuf::Arena* arena) const {
  BlueOrRedGroup* n = new BlueOrRedGroup;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BlueOrRedGroup::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.BlueOrRedGroup)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_master_bot()) {
      if (master_bot_ != NULL) master_bot_->::roborts_decision::MultiRobot::Clear();
    }
    if (has_wing_bot()) {
      if (wing_bot_ != NULL) wing_bot_->::roborts_decision::MultiRobot::Clear();
    }
    if (has_reload_point()) {
      if (reload_point_ != NULL) reload_point_->::roborts_decision::Point::Clear();
    }
    if (has_shield_point()) {
      if (shield_point_ != NULL) shield_point_->::roborts_decision::Point::Clear();
    }
  }
  patrol_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool BlueOrRedGroup::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.BlueOrRedGroup)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .roborts_decision.MultiRobot master_bot = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_master_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_wing_bot;
        break;
      }

      // optional .roborts_decision.MultiRobot wing_bot = 2;
      case 2: {
        if (tag == 18) {
         parse_wing_bot:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wing_bot()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_reload_point;
        break;
      }

      // optional .roborts_decision.Point reload_point = 3;
      case 3: {
        if (tag == 26) {
         parse_reload_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reload_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_shield_point;
        break;
      }

      // optional .roborts_decision.Point shield_point = 4;
      case 4: {
        if (tag == 34) {
         parse_shield_point:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shield_point()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_patrol;
        break;
      }

      // repeated .roborts_decision.Point patrol = 5;
      case 5: {
        if (tag == 42) {
         parse_patrol:
          DO_(input->IncrementRecursionDepth());
         parse_loop_patrol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_patrol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_patrol;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.BlueOrRedGroup)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.BlueOrRedGroup)
  return false;
#undef DO_
}

void BlueOrRedGroup::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.BlueOrRedGroup)
  // optional .roborts_decision.MultiRobot master_bot = 1;
  if (has_master_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->master_bot_, output);
  }

  // optional .roborts_decision.MultiRobot wing_bot = 2;
  if (has_wing_bot()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->wing_bot_, output);
  }

  // optional .roborts_decision.Point reload_point = 3;
  if (has_reload_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->reload_point_, output);
  }

  // optional .roborts_decision.Point shield_point = 4;
  if (has_shield_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->shield_point_, output);
  }

  // repeated .roborts_decision.Point patrol = 5;
  for (unsigned int i = 0, n = this->patrol_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->patrol(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.BlueOrRedGroup)
}

::google::protobuf::uint8* BlueOrRedGroup::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.BlueOrRedGroup)
  // optional .roborts_decision.MultiRobot master_bot = 1;
  if (has_master_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->master_bot_, false, target);
  }

  // optional .roborts_decision.MultiRobot wing_bot = 2;
  if (has_wing_bot()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->wing_bot_, false, target);
  }

  // optional .roborts_decision.Point reload_point = 3;
  if (has_reload_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->reload_point_, false, target);
  }

  // optional .roborts_decision.Point shield_point = 4;
  if (has_shield_point()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->shield_point_, false, target);
  }

  // repeated .roborts_decision.Point patrol = 5;
  for (unsigned int i = 0, n = this->patrol_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->patrol(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.BlueOrRedGroup)
  return target;
}

int BlueOrRedGroup::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.BlueOrRedGroup)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 15u) {
    // optional .roborts_decision.MultiRobot master_bot = 1;
    if (has_master_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->master_bot_);
    }

    // optional .roborts_decision.MultiRobot wing_bot = 2;
    if (has_wing_bot()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->wing_bot_);
    }

    // optional .roborts_decision.Point reload_point = 3;
    if (has_reload_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reload_point_);
    }

    // optional .roborts_decision.Point shield_point = 4;
    if (has_shield_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->shield_point_);
    }

  }
  // repeated .roborts_decision.Point patrol = 5;
  total_size += 1 * this->patrol_size();
  for (int i = 0; i < this->patrol_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->patrol(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlueOrRedGroup::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.BlueOrRedGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const BlueOrRedGroup* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const BlueOrRedGroup>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.BlueOrRedGroup)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.BlueOrRedGroup)
    MergeFrom(*source);
  }
}

void BlueOrRedGroup::MergeFrom(const BlueOrRedGroup& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.BlueOrRedGroup)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  patrol_.MergeFrom(from.patrol_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_master_bot()) {
      mutable_master_bot()->::roborts_decision::MultiRobot::MergeFrom(from.master_bot());
    }
    if (from.has_wing_bot()) {
      mutable_wing_bot()->::roborts_decision::MultiRobot::MergeFrom(from.wing_bot());
    }
    if (from.has_reload_point()) {
      mutable_reload_point()->::roborts_decision::Point::MergeFrom(from.reload_point());
    }
    if (from.has_shield_point()) {
      mutable_shield_point()->::roborts_decision::Point::MergeFrom(from.shield_point());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void BlueOrRedGroup::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.BlueOrRedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlueOrRedGroup::CopyFrom(const BlueOrRedGroup& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.BlueOrRedGroup)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlueOrRedGroup::IsInitialized() const {

  return true;
}

void BlueOrRedGroup::Swap(BlueOrRedGroup* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BlueOrRedGroup::InternalSwap(BlueOrRedGroup* other) {
  std::swap(master_bot_, other->master_bot_);
  std::swap(wing_bot_, other->wing_bot_);
  std::swap(reload_point_, other->reload_point_);
  std::swap(shield_point_, other->shield_point_);
  patrol_.UnsafeArenaSwap(&other->patrol_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BlueOrRedGroup::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlueOrRedGroup_descriptor_;
  metadata.reflection = BlueOrRedGroup_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BlueOrRedGroup

// optional .roborts_decision.MultiRobot master_bot = 1;
bool BlueOrRedGroup::has_master_bot() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BlueOrRedGroup::set_has_master_bot() {
  _has_bits_[0] |= 0x00000001u;
}
void BlueOrRedGroup::clear_has_master_bot() {
  _has_bits_[0] &= ~0x00000001u;
}
void BlueOrRedGroup::clear_master_bot() {
  if (master_bot_ != NULL) master_bot_->::roborts_decision::MultiRobot::Clear();
  clear_has_master_bot();
}
const ::roborts_decision::MultiRobot& BlueOrRedGroup::master_bot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.master_bot)
  return master_bot_ != NULL ? *master_bot_ : *default_instance_->master_bot_;
}
::roborts_decision::MultiRobot* BlueOrRedGroup::mutable_master_bot() {
  set_has_master_bot();
  if (master_bot_ == NULL) {
    master_bot_ = new ::roborts_decision::MultiRobot;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.master_bot)
  return master_bot_;
}
::roborts_decision::MultiRobot* BlueOrRedGroup::release_master_bot() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.master_bot)
  clear_has_master_bot();
  ::roborts_decision::MultiRobot* temp = master_bot_;
  master_bot_ = NULL;
  return temp;
}
void BlueOrRedGroup::set_allocated_master_bot(::roborts_decision::MultiRobot* master_bot) {
  delete master_bot_;
  master_bot_ = master_bot;
  if (master_bot) {
    set_has_master_bot();
  } else {
    clear_has_master_bot();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.master_bot)
}

// optional .roborts_decision.MultiRobot wing_bot = 2;
bool BlueOrRedGroup::has_wing_bot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BlueOrRedGroup::set_has_wing_bot() {
  _has_bits_[0] |= 0x00000002u;
}
void BlueOrRedGroup::clear_has_wing_bot() {
  _has_bits_[0] &= ~0x00000002u;
}
void BlueOrRedGroup::clear_wing_bot() {
  if (wing_bot_ != NULL) wing_bot_->::roborts_decision::MultiRobot::Clear();
  clear_has_wing_bot();
}
const ::roborts_decision::MultiRobot& BlueOrRedGroup::wing_bot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.wing_bot)
  return wing_bot_ != NULL ? *wing_bot_ : *default_instance_->wing_bot_;
}
::roborts_decision::MultiRobot* BlueOrRedGroup::mutable_wing_bot() {
  set_has_wing_bot();
  if (wing_bot_ == NULL) {
    wing_bot_ = new ::roborts_decision::MultiRobot;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.wing_bot)
  return wing_bot_;
}
::roborts_decision::MultiRobot* BlueOrRedGroup::release_wing_bot() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.wing_bot)
  clear_has_wing_bot();
  ::roborts_decision::MultiRobot* temp = wing_bot_;
  wing_bot_ = NULL;
  return temp;
}
void BlueOrRedGroup::set_allocated_wing_bot(::roborts_decision::MultiRobot* wing_bot) {
  delete wing_bot_;
  wing_bot_ = wing_bot;
  if (wing_bot) {
    set_has_wing_bot();
  } else {
    clear_has_wing_bot();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.wing_bot)
}

// optional .roborts_decision.Point reload_point = 3;
bool BlueOrRedGroup::has_reload_point() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void BlueOrRedGroup::set_has_reload_point() {
  _has_bits_[0] |= 0x00000004u;
}
void BlueOrRedGroup::clear_has_reload_point() {
  _has_bits_[0] &= ~0x00000004u;
}
void BlueOrRedGroup::clear_reload_point() {
  if (reload_point_ != NULL) reload_point_->::roborts_decision::Point::Clear();
  clear_has_reload_point();
}
const ::roborts_decision::Point& BlueOrRedGroup::reload_point() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.reload_point)
  return reload_point_ != NULL ? *reload_point_ : *default_instance_->reload_point_;
}
::roborts_decision::Point* BlueOrRedGroup::mutable_reload_point() {
  set_has_reload_point();
  if (reload_point_ == NULL) {
    reload_point_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.reload_point)
  return reload_point_;
}
::roborts_decision::Point* BlueOrRedGroup::release_reload_point() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.reload_point)
  clear_has_reload_point();
  ::roborts_decision::Point* temp = reload_point_;
  reload_point_ = NULL;
  return temp;
}
void BlueOrRedGroup::set_allocated_reload_point(::roborts_decision::Point* reload_point) {
  delete reload_point_;
  reload_point_ = reload_point;
  if (reload_point) {
    set_has_reload_point();
  } else {
    clear_has_reload_point();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.reload_point)
}

// optional .roborts_decision.Point shield_point = 4;
bool BlueOrRedGroup::has_shield_point() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void BlueOrRedGroup::set_has_shield_point() {
  _has_bits_[0] |= 0x00000008u;
}
void BlueOrRedGroup::clear_has_shield_point() {
  _has_bits_[0] &= ~0x00000008u;
}
void BlueOrRedGroup::clear_shield_point() {
  if (shield_point_ != NULL) shield_point_->::roborts_decision::Point::Clear();
  clear_has_shield_point();
}
const ::roborts_decision::Point& BlueOrRedGroup::shield_point() const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.shield_point)
  return shield_point_ != NULL ? *shield_point_ : *default_instance_->shield_point_;
}
::roborts_decision::Point* BlueOrRedGroup::mutable_shield_point() {
  set_has_shield_point();
  if (shield_point_ == NULL) {
    shield_point_ = new ::roborts_decision::Point;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.shield_point)
  return shield_point_;
}
::roborts_decision::Point* BlueOrRedGroup::release_shield_point() {
  // @@protoc_insertion_point(field_release:roborts_decision.BlueOrRedGroup.shield_point)
  clear_has_shield_point();
  ::roborts_decision::Point* temp = shield_point_;
  shield_point_ = NULL;
  return temp;
}
void BlueOrRedGroup::set_allocated_shield_point(::roborts_decision::Point* shield_point) {
  delete shield_point_;
  shield_point_ = shield_point;
  if (shield_point) {
    set_has_shield_point();
  } else {
    clear_has_shield_point();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.BlueOrRedGroup.shield_point)
}

// repeated .roborts_decision.Point patrol = 5;
int BlueOrRedGroup::patrol_size() const {
  return patrol_.size();
}
void BlueOrRedGroup::clear_patrol() {
  patrol_.Clear();
}
const ::roborts_decision::Point& BlueOrRedGroup::patrol(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_.Get(index);
}
::roborts_decision::Point* BlueOrRedGroup::mutable_patrol(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_.Mutable(index);
}
::roborts_decision::Point* BlueOrRedGroup::add_patrol() {
  // @@protoc_insertion_point(field_add:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
BlueOrRedGroup::mutable_patrol() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.BlueOrRedGroup.patrol)
  return &patrol_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
BlueOrRedGroup::patrol() const {
  // @@protoc_insertion_point(field_list:roborts_decision.BlueOrRedGroup.patrol)
  return patrol_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DecisionConfig::kStrategyFieldNumber;
const int DecisionConfig::kUseCameraFieldNumber;
const int DecisionConfig::kMasterFieldNumber;
const int DecisionConfig::kIsblueFieldNumber;
const int DecisionConfig::kUsewifiFieldNumber;
const int DecisionConfig::kMasterIpFieldNumber;
const int DecisionConfig::kRemainBulletFieldNumber;
const int DecisionConfig::kEscapeFieldNumber;
const int DecisionConfig::kBlueFieldNumber;
const int DecisionConfig::kRedFieldNumber;
const int DecisionConfig::kSearchLimitFieldNumber;
const int DecisionConfig::kWhirlVelFieldNumber;
const int DecisionConfig::kSearchRegion1FieldNumber;
const int DecisionConfig::kSearchRegion2FieldNumber;
const int DecisionConfig::kSearchRegion3FieldNumber;
const int DecisionConfig::kSearchRegion4FieldNumber;
const int DecisionConfig::kCanShootFieldNumber;
const int DecisionConfig::kCanDodgeFieldNumber;
const int DecisionConfig::kDodgeInReloadFieldNumber;
const int DecisionConfig::kShootHzFieldNumber;
const int DecisionConfig::kUseRefreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DecisionConfig::DecisionConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::InitAsDefaultInstance() {
  escape_ = const_cast< ::roborts_decision::EscapeConstraint*>(&::roborts_decision::EscapeConstraint::default_instance());
  blue_ = const_cast< ::roborts_decision::BlueOrRedGroup*>(&::roborts_decision::BlueOrRedGroup::default_instance());
  red_ = const_cast< ::roborts_decision::BlueOrRedGroup*>(&::roborts_decision::BlueOrRedGroup::default_instance());
  search_limit_ = const_cast< ::roborts_decision::SearchConstraint*>(&::roborts_decision::SearchConstraint::default_instance());
  whirl_vel_ = const_cast< ::roborts_decision::WhirlVel*>(&::roborts_decision::WhirlVel::default_instance());
}

DecisionConfig::DecisionConfig(const DecisionConfig& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:roborts_decision.DecisionConfig)
}

void DecisionConfig::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  strategy_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  use_camera_ = false;
  master_ = false;
  isblue_ = true;
  usewifi_ = false;
  master_ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  remain_bullet_ = 0;
  escape_ = NULL;
  blue_ = NULL;
  red_ = NULL;
  search_limit_ = NULL;
  whirl_vel_ = NULL;
  can_shoot_ = false;
  can_dodge_ = false;
  dodge_in_reload_ = false;
  shoot_hz_ = 0;
  use_refree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DecisionConfig::~DecisionConfig() {
  // @@protoc_insertion_point(destructor:roborts_decision.DecisionConfig)
  SharedDtor();
}

void DecisionConfig::SharedDtor() {
  strategy_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  master_ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete escape_;
    delete blue_;
    delete red_;
    delete search_limit_;
    delete whirl_vel_;
  }
}

void DecisionConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DecisionConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DecisionConfig_descriptor_;
}

const DecisionConfig& DecisionConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_decision_2eproto();
  return *default_instance_;
}

DecisionConfig* DecisionConfig::default_instance_ = NULL;

DecisionConfig* DecisionConfig::New(::google::protobuf::Arena* arena) const {
  DecisionConfig* n = new DecisionConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DecisionConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:roborts_decision.DecisionConfig)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(DecisionConfig, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<DecisionConfig*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(use_camera_, master_);
    ZR_(usewifi_, remain_bullet_);
    if (has_strategy()) {
      strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    isblue_ = true;
    if (has_master_ip()) {
      master_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_escape()) {
      if (escape_ != NULL) escape_->::roborts_decision::EscapeConstraint::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 3840u) {
    if (has_blue()) {
      if (blue_ != NULL) blue_->::roborts_decision::BlueOrRedGroup::Clear();
    }
    if (has_red()) {
      if (red_ != NULL) red_->::roborts_decision::BlueOrRedGroup::Clear();
    }
    if (has_search_limit()) {
      if (search_limit_ != NULL) search_limit_->::roborts_decision::SearchConstraint::Clear();
    }
    if (has_whirl_vel()) {
      if (whirl_vel_ != NULL) whirl_vel_->::roborts_decision::WhirlVel::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 2031616u) {
    ZR_(can_shoot_, shoot_hz_);
  }

#undef ZR_HELPER_
#undef ZR_

  search_region_1_.Clear();
  search_region_2_.Clear();
  search_region_3_.Clear();
  search_region_4_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DecisionConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:roborts_decision.DecisionConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string strategy = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_strategy()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->strategy().data(), this->strategy().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.DecisionConfig.strategy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_use_camera;
        break;
      }

      // optional bool use_camera = 2;
      case 2: {
        if (tag == 16) {
         parse_use_camera:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_camera_)));
          set_has_use_camera();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master;
        break;
      }

      // optional bool master = 3 [default = false];
      case 3: {
        if (tag == 24) {
         parse_master:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &master_)));
          set_has_master();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_isblue;
        break;
      }

      // optional bool isblue = 4 [default = true];
      case 4: {
        if (tag == 32) {
         parse_isblue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isblue_)));
          set_has_isblue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_usewifi;
        break;
      }

      // optional bool usewifi = 5;
      case 5: {
        if (tag == 40) {
         parse_usewifi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usewifi_)));
          set_has_usewifi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_master_ip;
        break;
      }

      // optional string master_ip = 6;
      case 6: {
        if (tag == 50) {
         parse_master_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_master_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->master_ip().data(), this->master_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "roborts_decision.DecisionConfig.master_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_remain_bullet;
        break;
      }

      // optional int32 remain_bullet = 7;
      case 7: {
        if (tag == 56) {
         parse_remain_bullet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remain_bullet_)));
          set_has_remain_bullet();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_escape;
        break;
      }

      // optional .roborts_decision.EscapeConstraint escape = 8;
      case 8: {
        if (tag == 66) {
         parse_escape:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escape()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_blue;
        break;
      }

      // optional .roborts_decision.BlueOrRedGroup blue = 9;
      case 9: {
        if (tag == 74) {
         parse_blue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blue()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_red;
        break;
      }

      // optional .roborts_decision.BlueOrRedGroup red = 10;
      case 10: {
        if (tag == 82) {
         parse_red:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_red()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_search_limit;
        break;
      }

      // optional .roborts_decision.SearchConstraint search_limit = 11;
      case 11: {
        if (tag == 90) {
         parse_search_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_search_limit()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_whirl_vel;
        break;
      }

      // optional .roborts_decision.WhirlVel whirl_vel = 12;
      case 12: {
        if (tag == 98) {
         parse_whirl_vel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_whirl_vel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_search_region_1;
        break;
      }

      // repeated .roborts_decision.Point search_region_1 = 13;
      case 13: {
        if (tag == 106) {
         parse_search_region_1:
          DO_(input->IncrementRecursionDepth());
         parse_loop_search_region_1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_search_region_1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_loop_search_region_1;
        if (input->ExpectTag(114)) goto parse_loop_search_region_2;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point search_region_2 = 14;
      case 14: {
        if (tag == 114) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_search_region_2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_search_region_2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_loop_search_region_2;
        if (input->ExpectTag(122)) goto parse_loop_search_region_3;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point search_region_3 = 15;
      case 15: {
        if (tag == 122) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_search_region_3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_search_region_3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_loop_search_region_3;
        if (input->ExpectTag(130)) goto parse_loop_search_region_4;
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated .roborts_decision.Point search_region_4 = 16;
      case 16: {
        if (tag == 130) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_search_region_4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_search_region_4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_loop_search_region_4;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(136)) goto parse_can_shoot;
        break;
      }

      // optional bool can_shoot = 17;
      case 17: {
        if (tag == 136) {
         parse_can_shoot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_shoot_)));
          set_has_can_shoot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_can_dodge;
        break;
      }

      // optional bool can_dodge = 18;
      case 18: {
        if (tag == 144) {
         parse_can_dodge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &can_dodge_)));
          set_has_can_dodge();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_dodge_in_reload;
        break;
      }

      // optional bool dodge_in_reload = 19;
      case 19: {
        if (tag == 152) {
         parse_dodge_in_reload:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dodge_in_reload_)));
          set_has_dodge_in_reload();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_shoot_hz;
        break;
      }

      // optional int32 shoot_hz = 20;
      case 20: {
        if (tag == 160) {
         parse_shoot_hz:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shoot_hz_)));
          set_has_shoot_hz();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_use_refree;
        break;
      }

      // optional bool use_refree = 21;
      case 21: {
        if (tag == 168) {
         parse_use_refree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &use_refree_)));
          set_has_use_refree();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:roborts_decision.DecisionConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:roborts_decision.DecisionConfig)
  return false;
#undef DO_
}

void DecisionConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:roborts_decision.DecisionConfig)
  // optional string strategy = 1;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.DecisionConfig.strategy");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->strategy(), output);
  }

  // optional bool use_camera = 2;
  if (has_use_camera()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->use_camera(), output);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->master(), output);
  }

  // optional bool isblue = 4 [default = true];
  if (has_isblue()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isblue(), output);
  }

  // optional bool usewifi = 5;
  if (has_usewifi()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->usewifi(), output);
  }

  // optional string master_ip = 6;
  if (has_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_ip().data(), this->master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.DecisionConfig.master_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->master_ip(), output);
  }

  // optional int32 remain_bullet = 7;
  if (has_remain_bullet()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->remain_bullet(), output);
  }

  // optional .roborts_decision.EscapeConstraint escape = 8;
  if (has_escape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *this->escape_, output);
  }

  // optional .roborts_decision.BlueOrRedGroup blue = 9;
  if (has_blue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *this->blue_, output);
  }

  // optional .roborts_decision.BlueOrRedGroup red = 10;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *this->red_, output);
  }

  // optional .roborts_decision.SearchConstraint search_limit = 11;
  if (has_search_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *this->search_limit_, output);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 12;
  if (has_whirl_vel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *this->whirl_vel_, output);
  }

  // repeated .roborts_decision.Point search_region_1 = 13;
  for (unsigned int i = 0, n = this->search_region_1_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->search_region_1(i), output);
  }

  // repeated .roborts_decision.Point search_region_2 = 14;
  for (unsigned int i = 0, n = this->search_region_2_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->search_region_2(i), output);
  }

  // repeated .roborts_decision.Point search_region_3 = 15;
  for (unsigned int i = 0, n = this->search_region_3_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->search_region_3(i), output);
  }

  // repeated .roborts_decision.Point search_region_4 = 16;
  for (unsigned int i = 0, n = this->search_region_4_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->search_region_4(i), output);
  }

  // optional bool can_shoot = 17;
  if (has_can_shoot()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->can_shoot(), output);
  }

  // optional bool can_dodge = 18;
  if (has_can_dodge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->can_dodge(), output);
  }

  // optional bool dodge_in_reload = 19;
  if (has_dodge_in_reload()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->dodge_in_reload(), output);
  }

  // optional int32 shoot_hz = 20;
  if (has_shoot_hz()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->shoot_hz(), output);
  }

  // optional bool use_refree = 21;
  if (has_use_refree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->use_refree(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:roborts_decision.DecisionConfig)
}

::google::protobuf::uint8* DecisionConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:roborts_decision.DecisionConfig)
  // optional string strategy = 1;
  if (has_strategy()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->strategy().data(), this->strategy().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.DecisionConfig.strategy");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->strategy(), target);
  }

  // optional bool use_camera = 2;
  if (has_use_camera()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->use_camera(), target);
  }

  // optional bool master = 3 [default = false];
  if (has_master()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->master(), target);
  }

  // optional bool isblue = 4 [default = true];
  if (has_isblue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isblue(), target);
  }

  // optional bool usewifi = 5;
  if (has_usewifi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->usewifi(), target);
  }

  // optional string master_ip = 6;
  if (has_master_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->master_ip().data(), this->master_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "roborts_decision.DecisionConfig.master_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->master_ip(), target);
  }

  // optional int32 remain_bullet = 7;
  if (has_remain_bullet()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->remain_bullet(), target);
  }

  // optional .roborts_decision.EscapeConstraint escape = 8;
  if (has_escape()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *this->escape_, false, target);
  }

  // optional .roborts_decision.BlueOrRedGroup blue = 9;
  if (has_blue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *this->blue_, false, target);
  }

  // optional .roborts_decision.BlueOrRedGroup red = 10;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *this->red_, false, target);
  }

  // optional .roborts_decision.SearchConstraint search_limit = 11;
  if (has_search_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *this->search_limit_, false, target);
  }

  // optional .roborts_decision.WhirlVel whirl_vel = 12;
  if (has_whirl_vel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *this->whirl_vel_, false, target);
  }

  // repeated .roborts_decision.Point search_region_1 = 13;
  for (unsigned int i = 0, n = this->search_region_1_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, this->search_region_1(i), false, target);
  }

  // repeated .roborts_decision.Point search_region_2 = 14;
  for (unsigned int i = 0, n = this->search_region_2_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, this->search_region_2(i), false, target);
  }

  // repeated .roborts_decision.Point search_region_3 = 15;
  for (unsigned int i = 0, n = this->search_region_3_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, this->search_region_3(i), false, target);
  }

  // repeated .roborts_decision.Point search_region_4 = 16;
  for (unsigned int i = 0, n = this->search_region_4_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, this->search_region_4(i), false, target);
  }

  // optional bool can_shoot = 17;
  if (has_can_shoot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->can_shoot(), target);
  }

  // optional bool can_dodge = 18;
  if (has_can_dodge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->can_dodge(), target);
  }

  // optional bool dodge_in_reload = 19;
  if (has_dodge_in_reload()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->dodge_in_reload(), target);
  }

  // optional int32 shoot_hz = 20;
  if (has_shoot_hz()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->shoot_hz(), target);
  }

  // optional bool use_refree = 21;
  if (has_use_refree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->use_refree(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:roborts_decision.DecisionConfig)
  return target;
}

int DecisionConfig::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:roborts_decision.DecisionConfig)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 255u) {
    // optional string strategy = 1;
    if (has_strategy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->strategy());
    }

    // optional bool use_camera = 2;
    if (has_use_camera()) {
      total_size += 1 + 1;
    }

    // optional bool master = 3 [default = false];
    if (has_master()) {
      total_size += 1 + 1;
    }

    // optional bool isblue = 4 [default = true];
    if (has_isblue()) {
      total_size += 1 + 1;
    }

    // optional bool usewifi = 5;
    if (has_usewifi()) {
      total_size += 1 + 1;
    }

    // optional string master_ip = 6;
    if (has_master_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->master_ip());
    }

    // optional int32 remain_bullet = 7;
    if (has_remain_bullet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->remain_bullet());
    }

    // optional .roborts_decision.EscapeConstraint escape = 8;
    if (has_escape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->escape_);
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional .roborts_decision.BlueOrRedGroup blue = 9;
    if (has_blue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->blue_);
    }

    // optional .roborts_decision.BlueOrRedGroup red = 10;
    if (has_red()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->red_);
    }

    // optional .roborts_decision.SearchConstraint search_limit = 11;
    if (has_search_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->search_limit_);
    }

    // optional .roborts_decision.WhirlVel whirl_vel = 12;
    if (has_whirl_vel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->whirl_vel_);
    }

  }
  if (_has_bits_[16 / 32] & 2031616u) {
    // optional bool can_shoot = 17;
    if (has_can_shoot()) {
      total_size += 2 + 1;
    }

    // optional bool can_dodge = 18;
    if (has_can_dodge()) {
      total_size += 2 + 1;
    }

    // optional bool dodge_in_reload = 19;
    if (has_dodge_in_reload()) {
      total_size += 2 + 1;
    }

    // optional int32 shoot_hz = 20;
    if (has_shoot_hz()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shoot_hz());
    }

    // optional bool use_refree = 21;
    if (has_use_refree()) {
      total_size += 2 + 1;
    }

  }
  // repeated .roborts_decision.Point search_region_1 = 13;
  total_size += 1 * this->search_region_1_size();
  for (int i = 0; i < this->search_region_1_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_1(i));
  }

  // repeated .roborts_decision.Point search_region_2 = 14;
  total_size += 1 * this->search_region_2_size();
  for (int i = 0; i < this->search_region_2_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_2(i));
  }

  // repeated .roborts_decision.Point search_region_3 = 15;
  total_size += 1 * this->search_region_3_size();
  for (int i = 0; i < this->search_region_3_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_3(i));
  }

  // repeated .roborts_decision.Point search_region_4 = 16;
  total_size += 2 * this->search_region_4_size();
  for (int i = 0; i < this->search_region_4_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->search_region_4(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DecisionConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:roborts_decision.DecisionConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DecisionConfig* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DecisionConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:roborts_decision.DecisionConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:roborts_decision.DecisionConfig)
    MergeFrom(*source);
  }
}

void DecisionConfig::MergeFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:roborts_decision.DecisionConfig)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  search_region_1_.MergeFrom(from.search_region_1_);
  search_region_2_.MergeFrom(from.search_region_2_);
  search_region_3_.MergeFrom(from.search_region_3_);
  search_region_4_.MergeFrom(from.search_region_4_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_strategy()) {
      set_has_strategy();
      strategy_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.strategy_);
    }
    if (from.has_use_camera()) {
      set_use_camera(from.use_camera());
    }
    if (from.has_master()) {
      set_master(from.master());
    }
    if (from.has_isblue()) {
      set_isblue(from.isblue());
    }
    if (from.has_usewifi()) {
      set_usewifi(from.usewifi());
    }
    if (from.has_master_ip()) {
      set_has_master_ip();
      master_ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.master_ip_);
    }
    if (from.has_remain_bullet()) {
      set_remain_bullet(from.remain_bullet());
    }
    if (from.has_escape()) {
      mutable_escape()->::roborts_decision::EscapeConstraint::MergeFrom(from.escape());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_blue()) {
      mutable_blue()->::roborts_decision::BlueOrRedGroup::MergeFrom(from.blue());
    }
    if (from.has_red()) {
      mutable_red()->::roborts_decision::BlueOrRedGroup::MergeFrom(from.red());
    }
    if (from.has_search_limit()) {
      mutable_search_limit()->::roborts_decision::SearchConstraint::MergeFrom(from.search_limit());
    }
    if (from.has_whirl_vel()) {
      mutable_whirl_vel()->::roborts_decision::WhirlVel::MergeFrom(from.whirl_vel());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_can_shoot()) {
      set_can_shoot(from.can_shoot());
    }
    if (from.has_can_dodge()) {
      set_can_dodge(from.can_dodge());
    }
    if (from.has_dodge_in_reload()) {
      set_dodge_in_reload(from.dodge_in_reload());
    }
    if (from.has_shoot_hz()) {
      set_shoot_hz(from.shoot_hz());
    }
    if (from.has_use_refree()) {
      set_use_refree(from.use_refree());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DecisionConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:roborts_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DecisionConfig::CopyFrom(const DecisionConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:roborts_decision.DecisionConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DecisionConfig::IsInitialized() const {

  return true;
}

void DecisionConfig::Swap(DecisionConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DecisionConfig::InternalSwap(DecisionConfig* other) {
  strategy_.Swap(&other->strategy_);
  std::swap(use_camera_, other->use_camera_);
  std::swap(master_, other->master_);
  std::swap(isblue_, other->isblue_);
  std::swap(usewifi_, other->usewifi_);
  master_ip_.Swap(&other->master_ip_);
  std::swap(remain_bullet_, other->remain_bullet_);
  std::swap(escape_, other->escape_);
  std::swap(blue_, other->blue_);
  std::swap(red_, other->red_);
  std::swap(search_limit_, other->search_limit_);
  std::swap(whirl_vel_, other->whirl_vel_);
  search_region_1_.UnsafeArenaSwap(&other->search_region_1_);
  search_region_2_.UnsafeArenaSwap(&other->search_region_2_);
  search_region_3_.UnsafeArenaSwap(&other->search_region_3_);
  search_region_4_.UnsafeArenaSwap(&other->search_region_4_);
  std::swap(can_shoot_, other->can_shoot_);
  std::swap(can_dodge_, other->can_dodge_);
  std::swap(dodge_in_reload_, other->dodge_in_reload_);
  std::swap(shoot_hz_, other->shoot_hz_);
  std::swap(use_refree_, other->use_refree_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DecisionConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DecisionConfig_descriptor_;
  metadata.reflection = DecisionConfig_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DecisionConfig

// optional string strategy = 1;
bool DecisionConfig::has_strategy() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DecisionConfig::set_has_strategy() {
  _has_bits_[0] |= 0x00000001u;
}
void DecisionConfig::clear_has_strategy() {
  _has_bits_[0] &= ~0x00000001u;
}
void DecisionConfig::clear_strategy() {
  strategy_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_strategy();
}
 const ::std::string& DecisionConfig::strategy() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.strategy)
  return strategy_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DecisionConfig::set_strategy(const ::std::string& value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.strategy)
}
 void DecisionConfig::set_strategy(const char* value) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.DecisionConfig.strategy)
}
 void DecisionConfig::set_strategy(const char* value, size_t size) {
  set_has_strategy();
  strategy_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.DecisionConfig.strategy)
}
 ::std::string* DecisionConfig::mutable_strategy() {
  set_has_strategy();
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.strategy)
  return strategy_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DecisionConfig::release_strategy() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.strategy)
  clear_has_strategy();
  return strategy_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DecisionConfig::set_allocated_strategy(::std::string* strategy) {
  if (strategy != NULL) {
    set_has_strategy();
  } else {
    clear_has_strategy();
  }
  strategy_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), strategy);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.strategy)
}

// optional bool use_camera = 2;
bool DecisionConfig::has_use_camera() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DecisionConfig::set_has_use_camera() {
  _has_bits_[0] |= 0x00000002u;
}
void DecisionConfig::clear_has_use_camera() {
  _has_bits_[0] &= ~0x00000002u;
}
void DecisionConfig::clear_use_camera() {
  use_camera_ = false;
  clear_has_use_camera();
}
 bool DecisionConfig::use_camera() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.use_camera)
  return use_camera_;
}
 void DecisionConfig::set_use_camera(bool value) {
  set_has_use_camera();
  use_camera_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.use_camera)
}

// optional bool master = 3 [default = false];
bool DecisionConfig::has_master() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DecisionConfig::set_has_master() {
  _has_bits_[0] |= 0x00000004u;
}
void DecisionConfig::clear_has_master() {
  _has_bits_[0] &= ~0x00000004u;
}
void DecisionConfig::clear_master() {
  master_ = false;
  clear_has_master();
}
 bool DecisionConfig::master() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master)
  return master_;
}
 void DecisionConfig::set_master(bool value) {
  set_has_master();
  master_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.master)
}

// optional bool isblue = 4 [default = true];
bool DecisionConfig::has_isblue() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DecisionConfig::set_has_isblue() {
  _has_bits_[0] |= 0x00000008u;
}
void DecisionConfig::clear_has_isblue() {
  _has_bits_[0] &= ~0x00000008u;
}
void DecisionConfig::clear_isblue() {
  isblue_ = true;
  clear_has_isblue();
}
 bool DecisionConfig::isblue() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.isblue)
  return isblue_;
}
 void DecisionConfig::set_isblue(bool value) {
  set_has_isblue();
  isblue_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.isblue)
}

// optional bool usewifi = 5;
bool DecisionConfig::has_usewifi() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DecisionConfig::set_has_usewifi() {
  _has_bits_[0] |= 0x00000010u;
}
void DecisionConfig::clear_has_usewifi() {
  _has_bits_[0] &= ~0x00000010u;
}
void DecisionConfig::clear_usewifi() {
  usewifi_ = false;
  clear_has_usewifi();
}
 bool DecisionConfig::usewifi() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.usewifi)
  return usewifi_;
}
 void DecisionConfig::set_usewifi(bool value) {
  set_has_usewifi();
  usewifi_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.usewifi)
}

// optional string master_ip = 6;
bool DecisionConfig::has_master_ip() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DecisionConfig::set_has_master_ip() {
  _has_bits_[0] |= 0x00000020u;
}
void DecisionConfig::clear_has_master_ip() {
  _has_bits_[0] &= ~0x00000020u;
}
void DecisionConfig::clear_master_ip() {
  master_ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_master_ip();
}
 const ::std::string& DecisionConfig::master_ip() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.master_ip)
  return master_ip_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DecisionConfig::set_master_ip(const ::std::string& value) {
  set_has_master_ip();
  master_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.master_ip)
}
 void DecisionConfig::set_master_ip(const char* value) {
  set_has_master_ip();
  master_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:roborts_decision.DecisionConfig.master_ip)
}
 void DecisionConfig::set_master_ip(const char* value, size_t size) {
  set_has_master_ip();
  master_ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:roborts_decision.DecisionConfig.master_ip)
}
 ::std::string* DecisionConfig::mutable_master_ip() {
  set_has_master_ip();
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.master_ip)
  return master_ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* DecisionConfig::release_master_ip() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.master_ip)
  clear_has_master_ip();
  return master_ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void DecisionConfig::set_allocated_master_ip(::std::string* master_ip) {
  if (master_ip != NULL) {
    set_has_master_ip();
  } else {
    clear_has_master_ip();
  }
  master_ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_ip);
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.master_ip)
}

// optional int32 remain_bullet = 7;
bool DecisionConfig::has_remain_bullet() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DecisionConfig::set_has_remain_bullet() {
  _has_bits_[0] |= 0x00000040u;
}
void DecisionConfig::clear_has_remain_bullet() {
  _has_bits_[0] &= ~0x00000040u;
}
void DecisionConfig::clear_remain_bullet() {
  remain_bullet_ = 0;
  clear_has_remain_bullet();
}
 ::google::protobuf::int32 DecisionConfig::remain_bullet() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.remain_bullet)
  return remain_bullet_;
}
 void DecisionConfig::set_remain_bullet(::google::protobuf::int32 value) {
  set_has_remain_bullet();
  remain_bullet_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.remain_bullet)
}

// optional .roborts_decision.EscapeConstraint escape = 8;
bool DecisionConfig::has_escape() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DecisionConfig::set_has_escape() {
  _has_bits_[0] |= 0x00000080u;
}
void DecisionConfig::clear_has_escape() {
  _has_bits_[0] &= ~0x00000080u;
}
void DecisionConfig::clear_escape() {
  if (escape_ != NULL) escape_->::roborts_decision::EscapeConstraint::Clear();
  clear_has_escape();
}
const ::roborts_decision::EscapeConstraint& DecisionConfig::escape() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.escape)
  return escape_ != NULL ? *escape_ : *default_instance_->escape_;
}
::roborts_decision::EscapeConstraint* DecisionConfig::mutable_escape() {
  set_has_escape();
  if (escape_ == NULL) {
    escape_ = new ::roborts_decision::EscapeConstraint;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.escape)
  return escape_;
}
::roborts_decision::EscapeConstraint* DecisionConfig::release_escape() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.escape)
  clear_has_escape();
  ::roborts_decision::EscapeConstraint* temp = escape_;
  escape_ = NULL;
  return temp;
}
void DecisionConfig::set_allocated_escape(::roborts_decision::EscapeConstraint* escape) {
  delete escape_;
  escape_ = escape;
  if (escape) {
    set_has_escape();
  } else {
    clear_has_escape();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.escape)
}

// optional .roborts_decision.BlueOrRedGroup blue = 9;
bool DecisionConfig::has_blue() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void DecisionConfig::set_has_blue() {
  _has_bits_[0] |= 0x00000100u;
}
void DecisionConfig::clear_has_blue() {
  _has_bits_[0] &= ~0x00000100u;
}
void DecisionConfig::clear_blue() {
  if (blue_ != NULL) blue_->::roborts_decision::BlueOrRedGroup::Clear();
  clear_has_blue();
}
const ::roborts_decision::BlueOrRedGroup& DecisionConfig::blue() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.blue)
  return blue_ != NULL ? *blue_ : *default_instance_->blue_;
}
::roborts_decision::BlueOrRedGroup* DecisionConfig::mutable_blue() {
  set_has_blue();
  if (blue_ == NULL) {
    blue_ = new ::roborts_decision::BlueOrRedGroup;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.blue)
  return blue_;
}
::roborts_decision::BlueOrRedGroup* DecisionConfig::release_blue() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.blue)
  clear_has_blue();
  ::roborts_decision::BlueOrRedGroup* temp = blue_;
  blue_ = NULL;
  return temp;
}
void DecisionConfig::set_allocated_blue(::roborts_decision::BlueOrRedGroup* blue) {
  delete blue_;
  blue_ = blue;
  if (blue) {
    set_has_blue();
  } else {
    clear_has_blue();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.blue)
}

// optional .roborts_decision.BlueOrRedGroup red = 10;
bool DecisionConfig::has_red() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void DecisionConfig::set_has_red() {
  _has_bits_[0] |= 0x00000200u;
}
void DecisionConfig::clear_has_red() {
  _has_bits_[0] &= ~0x00000200u;
}
void DecisionConfig::clear_red() {
  if (red_ != NULL) red_->::roborts_decision::BlueOrRedGroup::Clear();
  clear_has_red();
}
const ::roborts_decision::BlueOrRedGroup& DecisionConfig::red() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.red)
  return red_ != NULL ? *red_ : *default_instance_->red_;
}
::roborts_decision::BlueOrRedGroup* DecisionConfig::mutable_red() {
  set_has_red();
  if (red_ == NULL) {
    red_ = new ::roborts_decision::BlueOrRedGroup;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.red)
  return red_;
}
::roborts_decision::BlueOrRedGroup* DecisionConfig::release_red() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.red)
  clear_has_red();
  ::roborts_decision::BlueOrRedGroup* temp = red_;
  red_ = NULL;
  return temp;
}
void DecisionConfig::set_allocated_red(::roborts_decision::BlueOrRedGroup* red) {
  delete red_;
  red_ = red;
  if (red) {
    set_has_red();
  } else {
    clear_has_red();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.red)
}

// optional .roborts_decision.SearchConstraint search_limit = 11;
bool DecisionConfig::has_search_limit() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void DecisionConfig::set_has_search_limit() {
  _has_bits_[0] |= 0x00000400u;
}
void DecisionConfig::clear_has_search_limit() {
  _has_bits_[0] &= ~0x00000400u;
}
void DecisionConfig::clear_search_limit() {
  if (search_limit_ != NULL) search_limit_->::roborts_decision::SearchConstraint::Clear();
  clear_has_search_limit();
}
const ::roborts_decision::SearchConstraint& DecisionConfig::search_limit() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_limit)
  return search_limit_ != NULL ? *search_limit_ : *default_instance_->search_limit_;
}
::roborts_decision::SearchConstraint* DecisionConfig::mutable_search_limit() {
  set_has_search_limit();
  if (search_limit_ == NULL) {
    search_limit_ = new ::roborts_decision::SearchConstraint;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_limit)
  return search_limit_;
}
::roborts_decision::SearchConstraint* DecisionConfig::release_search_limit() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.search_limit)
  clear_has_search_limit();
  ::roborts_decision::SearchConstraint* temp = search_limit_;
  search_limit_ = NULL;
  return temp;
}
void DecisionConfig::set_allocated_search_limit(::roborts_decision::SearchConstraint* search_limit) {
  delete search_limit_;
  search_limit_ = search_limit;
  if (search_limit) {
    set_has_search_limit();
  } else {
    clear_has_search_limit();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.search_limit)
}

// optional .roborts_decision.WhirlVel whirl_vel = 12;
bool DecisionConfig::has_whirl_vel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void DecisionConfig::set_has_whirl_vel() {
  _has_bits_[0] |= 0x00000800u;
}
void DecisionConfig::clear_has_whirl_vel() {
  _has_bits_[0] &= ~0x00000800u;
}
void DecisionConfig::clear_whirl_vel() {
  if (whirl_vel_ != NULL) whirl_vel_->::roborts_decision::WhirlVel::Clear();
  clear_has_whirl_vel();
}
const ::roborts_decision::WhirlVel& DecisionConfig::whirl_vel() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_ != NULL ? *whirl_vel_ : *default_instance_->whirl_vel_;
}
::roborts_decision::WhirlVel* DecisionConfig::mutable_whirl_vel() {
  set_has_whirl_vel();
  if (whirl_vel_ == NULL) {
    whirl_vel_ = new ::roborts_decision::WhirlVel;
  }
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.whirl_vel)
  return whirl_vel_;
}
::roborts_decision::WhirlVel* DecisionConfig::release_whirl_vel() {
  // @@protoc_insertion_point(field_release:roborts_decision.DecisionConfig.whirl_vel)
  clear_has_whirl_vel();
  ::roborts_decision::WhirlVel* temp = whirl_vel_;
  whirl_vel_ = NULL;
  return temp;
}
void DecisionConfig::set_allocated_whirl_vel(::roborts_decision::WhirlVel* whirl_vel) {
  delete whirl_vel_;
  whirl_vel_ = whirl_vel;
  if (whirl_vel) {
    set_has_whirl_vel();
  } else {
    clear_has_whirl_vel();
  }
  // @@protoc_insertion_point(field_set_allocated:roborts_decision.DecisionConfig.whirl_vel)
}

// repeated .roborts_decision.Point search_region_1 = 13;
int DecisionConfig::search_region_1_size() const {
  return search_region_1_.size();
}
void DecisionConfig::clear_search_region_1() {
  search_region_1_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::search_region_1(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_search_region_1(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_search_region_1() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_1() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_1)
  return &search_region_1_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_1() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_1)
  return search_region_1_;
}

// repeated .roborts_decision.Point search_region_2 = 14;
int DecisionConfig::search_region_2_size() const {
  return search_region_2_.size();
}
void DecisionConfig::clear_search_region_2() {
  search_region_2_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::search_region_2(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_search_region_2(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_search_region_2() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_2() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_2)
  return &search_region_2_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_2() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_2)
  return search_region_2_;
}

// repeated .roborts_decision.Point search_region_3 = 15;
int DecisionConfig::search_region_3_size() const {
  return search_region_3_.size();
}
void DecisionConfig::clear_search_region_3() {
  search_region_3_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::search_region_3(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_search_region_3(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_search_region_3() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_3() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_3)
  return &search_region_3_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_3() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_3)
  return search_region_3_;
}

// repeated .roborts_decision.Point search_region_4 = 16;
int DecisionConfig::search_region_4_size() const {
  return search_region_4_.size();
}
void DecisionConfig::clear_search_region_4() {
  search_region_4_.Clear();
}
const ::roborts_decision::Point& DecisionConfig::search_region_4(int index) const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Get(index);
}
::roborts_decision::Point* DecisionConfig::mutable_search_region_4(int index) {
  // @@protoc_insertion_point(field_mutable:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Mutable(index);
}
::roborts_decision::Point* DecisionConfig::add_search_region_4() {
  // @@protoc_insertion_point(field_add:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_.Add();
}
::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >*
DecisionConfig::mutable_search_region_4() {
  // @@protoc_insertion_point(field_mutable_list:roborts_decision.DecisionConfig.search_region_4)
  return &search_region_4_;
}
const ::google::protobuf::RepeatedPtrField< ::roborts_decision::Point >&
DecisionConfig::search_region_4() const {
  // @@protoc_insertion_point(field_list:roborts_decision.DecisionConfig.search_region_4)
  return search_region_4_;
}

// optional bool can_shoot = 17;
bool DecisionConfig::has_can_shoot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void DecisionConfig::set_has_can_shoot() {
  _has_bits_[0] |= 0x00010000u;
}
void DecisionConfig::clear_has_can_shoot() {
  _has_bits_[0] &= ~0x00010000u;
}
void DecisionConfig::clear_can_shoot() {
  can_shoot_ = false;
  clear_has_can_shoot();
}
 bool DecisionConfig::can_shoot() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.can_shoot)
  return can_shoot_;
}
 void DecisionConfig::set_can_shoot(bool value) {
  set_has_can_shoot();
  can_shoot_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.can_shoot)
}

// optional bool can_dodge = 18;
bool DecisionConfig::has_can_dodge() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void DecisionConfig::set_has_can_dodge() {
  _has_bits_[0] |= 0x00020000u;
}
void DecisionConfig::clear_has_can_dodge() {
  _has_bits_[0] &= ~0x00020000u;
}
void DecisionConfig::clear_can_dodge() {
  can_dodge_ = false;
  clear_has_can_dodge();
}
 bool DecisionConfig::can_dodge() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.can_dodge)
  return can_dodge_;
}
 void DecisionConfig::set_can_dodge(bool value) {
  set_has_can_dodge();
  can_dodge_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.can_dodge)
}

// optional bool dodge_in_reload = 19;
bool DecisionConfig::has_dodge_in_reload() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void DecisionConfig::set_has_dodge_in_reload() {
  _has_bits_[0] |= 0x00040000u;
}
void DecisionConfig::clear_has_dodge_in_reload() {
  _has_bits_[0] &= ~0x00040000u;
}
void DecisionConfig::clear_dodge_in_reload() {
  dodge_in_reload_ = false;
  clear_has_dodge_in_reload();
}
 bool DecisionConfig::dodge_in_reload() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.dodge_in_reload)
  return dodge_in_reload_;
}
 void DecisionConfig::set_dodge_in_reload(bool value) {
  set_has_dodge_in_reload();
  dodge_in_reload_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.dodge_in_reload)
}

// optional int32 shoot_hz = 20;
bool DecisionConfig::has_shoot_hz() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void DecisionConfig::set_has_shoot_hz() {
  _has_bits_[0] |= 0x00080000u;
}
void DecisionConfig::clear_has_shoot_hz() {
  _has_bits_[0] &= ~0x00080000u;
}
void DecisionConfig::clear_shoot_hz() {
  shoot_hz_ = 0;
  clear_has_shoot_hz();
}
 ::google::protobuf::int32 DecisionConfig::shoot_hz() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.shoot_hz)
  return shoot_hz_;
}
 void DecisionConfig::set_shoot_hz(::google::protobuf::int32 value) {
  set_has_shoot_hz();
  shoot_hz_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.shoot_hz)
}

// optional bool use_refree = 21;
bool DecisionConfig::has_use_refree() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void DecisionConfig::set_has_use_refree() {
  _has_bits_[0] |= 0x00100000u;
}
void DecisionConfig::clear_has_use_refree() {
  _has_bits_[0] &= ~0x00100000u;
}
void DecisionConfig::clear_use_refree() {
  use_refree_ = false;
  clear_has_use_refree();
}
 bool DecisionConfig::use_refree() const {
  // @@protoc_insertion_point(field_get:roborts_decision.DecisionConfig.use_refree)
  return use_refree_;
}
 void DecisionConfig::set_use_refree(bool value) {
  set_has_use_refree();
  use_refree_ = value;
  // @@protoc_insertion_point(field_set:roborts_decision.DecisionConfig.use_refree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace roborts_decision

// @@protoc_insertion_point(global_scope)
